import type { API_HashEntry } from '@storybook/types';
import type { SerializedFileNode } from './fileNode.types';
import type { ParsedStoryFile } from './storybook.types';
import type { Uids, UidStory } from './uid.types';

/** Options accepted by the UsageTree constructor. */
type UsageTreeOptions = {
  /** The base path to resolve relative paths from. */
  basePath: string;
  /** The tree generated by the vite plugin. */
  tree: SerializedFileNode;
  /** The UIDs generated by the vite plugin. */
  uids: Uids;
  /** An array of story files that were not used during parsing. */
  unusedStories: ParsedStoryFile[];
};

/** An API_IndexHash object after using Object.entries. */
type IndexEntryTuple = [string, API_HashEntry];
/** An IndexedStories object after using Object.entries. */
type UidIndexEntryTuple = [string, UidStory];

/** Result of UsageTree.#getParentComponent. */
type ParentIndexEntry = {
  /** The specific index entry for the component. */
  component: IndexEntryTuple | null;
  /** Whether the component value has already been added to the tracking array. */
  componentExists: number;
  /** The specific index entry for the docs. */
  docs: IndexEntryTuple | null;
  /** Whether the docs value has already been added to the tracking array. */
  docsExists: number;
};

export type { ParentIndexEntry, UidIndexEntryTuple, UsageTreeOptions };
